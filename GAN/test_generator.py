from rdkit import Chem
from smiles_utilis import get_validity_metric
import torch
from tqdm import tqdm
from DTI import smile_graph, drug_graph_to_data, protein_graph, protein_graph_to_data

def evaluate_smiles(smiles_list, training_set=None):
    total = len(smiles_list)
    
    # Valid molecules
    valid_smiles = [s for s in smiles_list if get_validity_metric(s)==1]
    valid_count = len(valid_smiles)
    
    # Uniqueness
    unique_smiles = set(valid_smiles)
    unique_count = len(unique_smiles)

    # Novelty
    if training_set is not None and len(training_set) > 0:
        training_set = set(training_set)
        novel_smiles = unique_smiles - training_set
        novelty_count = len(novel_smiles)
        novelty_ratio = novelty_count / len(unique_smiles)
    else:
        novelty_ratio = None

    return {
        "Total Generated": total,
        "Valid SMILES": valid_count,
        "Validity (%)": valid_count / total * 100,
        "Unique SMILES": unique_count,
        "Uniqueness (%)": unique_count / valid_count * 100 if valid_count > 0 else 0,
        "Novelty (%)": novelty_ratio * 100 if novelty_ratio is not None else "N/A"
    }



def evaluate_generated_vs_known_inhibitors(inhibitors, generator, DTI_model, esm_model, esm_alphabet, virus, char2idx, idx2char, device):
    virus_graph = protein_graph(esm_model, esm_alphabet, virus)
    virus_graph = protein_graph_to_data(virus_graph).to(device)

    known_results = []
    for smiles in inhibitors:
        if get_validity_metric(smiles):
            drug_graph = smile_graph(smiles)
            drug_graph = drug_graph_to_data(drug_graph).to(device)
            with torch.no_grad():
                output = DTI_model(virus_graph, drug_graph)
                pic50 = output.item()
                known_results.append((smiles, pic50))

    print("Known Inhibitors PIC50:")
    for smiles, score in known_results:
        print(f"{smiles} → PIC50 = {score}")

    generated_smiles_scores = []
    count_above_7 = 0
    count_above_6 = 0

    with torch.no_grad():
        generated, _ = generator.sample(char2idx['<SOS>'], 128, 100, temperature=1)
        for i in tqdm(range(100), desc="Evaluating generated SMILES"):
            smiles = ''.join([idx2char[t] for t in generated[i].tolist()
                              if t not in [char2idx['<SOS>'], char2idx['<EOS>'], char2idx['<PAD>']]])
            if get_validity_metric(smiles):
                try:
                    drug_graph = smile_graph(smiles)
                    drug_graph = drug_graph_to_data(drug_graph).to(device)
                    output = DTI_model(virus_graph, drug_graph)
                    pic50 = output.item()
                    generated_smiles_scores.append((smiles, pic50))
                    # Count thresholds
                    if pic50 > 7:
                        count_above_7 += 1
                    if pic50 > 6:
                        count_above_6 += 1
                except :
                    continue

    # Sort generated by PIC50 descending
    top_generated = sorted(generated_smiles_scores, key=lambda x: x[1], reverse=True)[:10]

    print("Top 10 Generated SMILES (by PIC50):")
    for i, (smiles, score) in enumerate(top_generated):
        print(f"{i+1}. {smiles} → PIC50 = {score}")

    print("Summary:")
    print(f"   Number of generated molecules with PIC50 > 7: {count_above_7}")
    print(f"   Number of generated molecules with PIC50 > 6: {count_above_6}")

    return known_results, top_generated

